秒杀  高并发
从前端到后端-------------------
>前端  突然增加网络访问的带宽，用户可能会进行重复提交
>后端
>1  秒杀抢购中会遇到那个问题	
			>1.1 秒杀抢购中商品库存超卖的问题 1. redis实现分布式锁 2.乐观锁[数据库] 3.mq
			
			>2.2
------------------			
------------------			
浏览器 加载网络资源的时候会有 css html //动态资源
  当用户如果说在访问我们的秒杀地址的时候，肯定会加载静态资源和动态资源
  {
  //1. 秒杀服务需要单独独立以微服务的形式进行部署?
		目的是互不影响其他服务，其实docker部署快速实现扩容
  微服务的特征：每个服务之间互不影响
  秒杀服务集群 通过nginx
  
  
  通过网关实现限流【对用户的操作频路做一个限制】
  用到Hystrix  防止服务雪崩问题  [服务的保护框架]
  
  库存db{修改db的库存}
  1.>库存超卖   
  当修改库存请求过多的时候 导致数据库压力增大的  如何解决
  实现分库分表 ，或者使用Mq [流量削封]异步实现修改库存
  -------------------------
  场景 --->30分钟之后就可以知道
  -------------------------  
  如何防止库存超卖的问题
  1.使用乐观锁 cas进行无锁机制进行比较
  2.使用redis实现分布式锁  （秒杀抢购不要使用zookeeper）
  3.使用Mq异步形式实现修改库存（用户等待时间过长{yibu}）
  ------------------------- ------------------------- ------------------------- 
  从前端到后端的秒杀优化
	前端的秒杀优化如何优化
	服务器带宽 1兆，2兆，3兆，加载一个网页640KB
带宽入口	
  
  在一个网页中 ,静态资源占用了大部分带宽，图片 css js
				动态资源占用的带宽非常小  发送ajax
  }
  //->加载一个网页需要640kb   5秒
  
  用户需要花5秒时间
将整个网页加载完毕   用户需要等待

1.客户端在1秒内吧页面进行展示出来 如何实现
	1.带宽提高
	2.如何实现静态优化   吧静态资源进行压缩  让带宽变小{}
高并发情况下的核心 ：动静分离 
---------------------------------------------------->
呢么如何来实现 动静分离  
至少 让用户能够正常的吧秒杀页面加载下来
搞个文件服务器{静态服务器}
前后端分离  动静分离(js，css,图片通过zuul  路由到)静态服务器
减少秒杀服务接口的压力
{}
*---------------------------------------------------------------------》
既然要做秒杀的话 1首先要让用户访问到你服务器中去
				  5兆的话  可以支持多少人进行抢购  可以支持640进行抢占
					128*5

七牛云  阿里的OSS  //---->存储 
g （静态服务器）  可以ping 到不同的ip 说明我们用到的第三方静态资源服务器
 解析地址多个
 [全国很多结点]
 使用cdn 内容分发   遵循Ip就近原则  CDN 是可以实现客户端与服务器端 带宽传输
------------------》cdn
把你的内容缓存到全国各地 再进行就近原则让最近的服务器进行访问 可以减少服务器的带宽传输
可以减少服务器和客户端的带宽传输 []  
将静态资源放到第三方服务器 比如说七牛云  阿里oss
*---------------------------------------------------------------------》
把我们的文件上传到七牛云   吧图片css放在静态服务器上  访问 域名
  支持cdn加速
  所以 在商品详情页 写域名 进行域名读取
  域名不同
 *---------------------------------------------------------------------*---------------------------------------------------------------------》》
   一个秒杀里面 什么用的多  查询操作 缓存 
  商品详情页面一般不会发生变化，不会让好多人都去加载商品详情页
  一般不容易改变的话   我们直接缓存页面   此时不需要加载数据库
  商品详情面的优化
  nginx 缓存页面 ,  吧页面缓存到nginx  因为此时商品详情页很少变化{根据url地址实现缓存}
  -----------------------------------------------------------------------------------------------
  商品详情发生变化 Lua+OperResty 帮我们实现
  所以我们的商品详情页 Nginx+Lua+OperResty, 如果说一旦商品详情发生变化的话会加个版本号
   ----------------------------------------------------------------------------------------------------------------
 秒杀抢购 前端优化  入口  最核心的一点就是通过动态静态分离   吧静态资源存放在一些第三方的一些服务器上
 帮我们 使用cdn 内容分发   遵循Ip就近原则  CDN 是可以实现客户端与服务器端 带宽传输
    ----------------------------------------------------------------------------------------------------------------